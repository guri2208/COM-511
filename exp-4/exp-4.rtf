{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 def linear_search(arr, target):\
    for i in range(len(arr)):\
        if arr[i] == target:\
            return i  # Return the index of the target if found\
    return -1  # Return -1 if the target is not in the list\
\
def binary_search(arr, target):\
    left, right = 0, len(arr) - 1\
\
    while left <= right:\
        mid = (left + right) // 2\
        if arr[mid] == target:\
            return mid  # Return the index of the target if found\
        elif arr[mid] < target:\
            left = mid + 1\
        else:\
            right = mid - 1\
\
    return -1  # Return -1 if the target is not in the list\
\
def search(arr, target):\
    # Check if the list is sorted\
    is_sorted = all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\
\
    if is_sorted:\
        return binary_search(arr, target)\
    else:\
        return linear_search(arr, target)\
\
# Example usage:\
my_list = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\
target = 6\
result = search(my_list, target)\
if result != -1:\
    print(f"Element \{target\} found at index \{result\}.")\
else:\
    print(f"Element \{target\} not found in the list.")\
}